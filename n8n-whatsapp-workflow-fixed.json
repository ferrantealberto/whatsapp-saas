{
  "name": "WhatsApp SaaS - Email to WhatsApp Numbers Extraction (FIXED)",
  "nodes": [
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "user",
        "user": {
          "resource": "message",
          "operation": "getAll",
          "returnAll": true,
          "filters": {
            "receivedAfter": "={{ $now.minus({days: 1}).toISO() }}",
            "q": "has:attachment OR WhatsApp OR numero OR telefono OR contatto OR mail2wa"
          }
        }
      },
      "id": "1fc7b1a5-8b9c-4e1e-b2c8-9e8d7c6b5a4f",
      "name": "Gmail - Get New Emails",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// UPDATED PATTERN MATCHING FOR MAIL2WA EMAILS\n// Extract WhatsApp numbers from email content with improved patterns\n\nconst items = $input.all();\nconst results = [];\n\n// IMPROVED WhatsApp number patterns (includes Mail2Wa format)\nconst patterns = [\n  // Italian mobile WITH +39 prefix and separators\n  /(?:\\+39[\\s\\-\\.]?)?3[0-9]{2}[\\s\\-\\.]?[0-9]{3}[\\s\\-\\.]?[0-9]{4}/g,\n  \n  // Italian mobile WITHOUT separators (Mail2Wa format) - FIXED!\n  /\\b39[0-9]{10,12}\\b/g,\n  \n  // Standard Italian mobile (10 digits starting with 3)  \n  /\\b3[0-9]{9}\\b/g,\n  \n  // International WhatsApp format\n  /\\+[1-9]{1}[0-9]{1,3}[\\s\\-\\.]?[0-9]{1,4}[\\s\\-\\.]?[0-9]{1,4}[\\s\\-\\.]?[0-9]{1,4}/g,\n  \n  // General mobile with separators\n  /3[0-9]{2}[\\s\\-\\.]?[0-9]{3}[\\s\\-\\.]?[0-9]{4}/g,\n  \n  // Mail2Wa Reply-To format - NEW!\n  /([0-9]{10,12})@mail2wa\\.it/g\n];\n\nfor (const item of items) {\n  try {\n    // Get email content from different possible fields\n    const emailContent = item.json.bodyText || \n                        item.json.bodyHtml ||\n                        item.json.snippet ||\n                        item.json.payload?.parts?.[0]?.body?.data ||\n                        JSON.stringify(item.json);\n    \n    const subject = item.json.subject || 'No Subject';\n    const sender = item.json.from || 'Unknown Sender';\n    const replyTo = item.json.replyTo || item.json['reply-to'] || ''; // Check Reply-To header\n    const messageId = item.json.id;\n    \n    console.log(`Processing email: ${subject}`);\n    console.log(`Reply-To: ${replyTo}`);\n    \n    // Extract phone numbers using all patterns\n    const foundNumbers = new Set();\n    \n    // Search in content, subject, and reply-to\n    const searchTexts = [emailContent, subject, replyTo];\n    \n    searchTexts.forEach((text, index) => {\n      if (text) {\n        const textType = ['content', 'subject', 'reply-to'][index];\n        console.log(`Searching in ${textType}: ${text.substring(0, 200)}...`);\n        \n        patterns.forEach((pattern, patternIndex) => {\n          const matches = text.match(pattern);\n          if (matches) {\n            matches.forEach(match => {\n              // Clean the number\n              let cleanNumber = match.replace(/[\\s\\-\\.@mail2wa\\.it]/g, '');\n              \n              // Handle Reply-To format (extract number before @)\n              if (match.includes('@mail2wa.it')) {\n                cleanNumber = match.split('@')[0];\n              }\n              \n              // Normalize Italian numbers\n              if (cleanNumber.startsWith('39') && cleanNumber.length >= 11) {\n                // Keep as is for Mail2Wa format\n                foundNumbers.add(cleanNumber);\n              } else if (cleanNumber.startsWith('3') && cleanNumber.length === 10) {\n                // Add 39 prefix for standard Italian mobile\n                foundNumbers.add('39' + cleanNumber);\n              } else if (cleanNumber.length >= 10) {\n                foundNumbers.add(cleanNumber);\n              }\n              \n              console.log(`Pattern ${patternIndex} found in ${textType}: ${match} -> ${cleanNumber}`);\n            });\n          }\n        });\n      }\n    });\n    \n    // Convert to array and validate\n    const extractedNumbers = Array.from(foundNumbers).filter(number => {\n      // Validate number format\n      const isValid = /^39[0-9]{10,12}$/.test(number) || \n                     /^3[0-9]{9}$/.test(number) ||\n                     /^\\+?[1-9][0-9]{8,14}$/.test(number);\n      \n      if (!isValid) {\n        console.log(`Invalid number format: ${number}`);\n      }\n      \n      return isValid;\n    });\n    \n    console.log(`Total numbers extracted: ${extractedNumbers.length}`);\n    console.log(`Numbers: ${JSON.stringify(extractedNumbers)}`);\n    \n    // Determine source type\n    let sourceType = 'email';\n    if (replyTo.includes('mail2wa.it') || subject.toLowerCase().includes('mail2wa')) {\n      sourceType = 'mail2wa';\n    }\n    \n    // Create result object\n    const result = {\n      email_id: messageId,\n      sender_email: sender,\n      subject: subject,\n      reply_to: replyTo,\n      extracted_numbers: extractedNumbers,\n      numbers_count: extractedNumbers.length,\n      source: sourceType,\n      timestamp: new Date().toISOString(),\n      processing_node: 'extract_whatsapp_numbers_fixed'\n    };\n    \n    // Only add to results if we found numbers\n    if (extractedNumbers.length > 0) {\n      results.push({\n        json: result\n      });\n      \n      console.log(`✅ Successfully extracted ${extractedNumbers.length} numbers from ${sourceType} email`);\n    } else {\n      console.log(`⚠️ No valid numbers found in email: ${subject}`);\n    }\n    \n  } catch (error) {\n    console.error(`Error processing email: ${error.message}`);\n    \n    // Add error result\n    results.push({\n      json: {\n        email_id: item.json.id || 'unknown',\n        sender_email: item.json.from || 'unknown',\n        subject: item.json.subject || 'unknown',\n        extracted_numbers: [],\n        numbers_count: 0,\n        error: error.message,\n        timestamp: new Date().toISOString(),\n        processing_node: 'extract_whatsapp_numbers_fixed'\n      }\n    });\n  }\n}\n\nconsole.log(`Total results: ${results.length}`);\nreturn results;"
      },
      "id": "2a8c4e6f-9b1d-4c3e-a5f7-8e9d0c2b3a6f",
      "name": "Extract WhatsApp Numbers (FIXED)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "={{ $vars.WORDPRESS_API_URL }}/wp-json/wsp/v1/extract",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-Key",
              "value": "={{ $vars.WORDPRESS_API_KEY }}"
            },
            {
              "name": "Content-Type", 
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxRetries": 3
          }
        }
      },
      "id": "3b9d5e7a-0c2e-4d4f-b6e8-9f0e1d3c5b8a",
      "name": "Send to WordPress API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// Process WordPress API response and prepare for logging\nconst items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const response = item.json;\n    const originalData = $('Extract WhatsApp Numbers (FIXED)').item.json;\n    \n    // Create comprehensive log entry\n    const logEntry = {\n      timestamp: new Date().toISOString(),\n      email_id: originalData.email_id,\n      sender_email: originalData.sender_email,\n      subject: originalData.subject,\n      reply_to: originalData.reply_to, // NEW: Log reply-to for Mail2Wa tracking\n      numbers_extracted: originalData.numbers_count,\n      numbers_saved: response.numbers_saved || 0,\n      api_success: response.success || false,\n      api_message: response.message || 'No message',\n      errors: response.errors || [],\n      processing_status: response.success ? 'completed' : 'failed',\n      source: originalData.source || 'unknown'\n    };\n    \n    results.push({\n      json: logEntry\n    });\n    \n    console.log(`Processed API response: ${logEntry.processing_status}`);\n    console.log(`Numbers saved: ${logEntry.numbers_saved}`);\n    \n  } catch (error) {\n    results.push({\n      json: {\n        timestamp: new Date().toISOString(),\n        processing_status: 'error',\n        error_message: error.message,\n        error_details: error.toString()\n      }\n    });\n  }\n}\n\nreturn results;"
      },
      "id": "4c0e6f8b-1d3f-4e5a-c7b9-0a1e2f4d6c9b",
      "name": "Process API Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "resource": "sheet",
        "operation": "appendOrUpdate",
        "documentId": "={{ $vars.GOOGLE_SHEET_ID }}",
        "sheetName": "WhatsApp Extraction Log",
        "keyRow": 1,
        "dataMode": "autoMap",
        "options": {
          "cellFormat": "USER_ENTERED",
          "useAppend": true
        }
      },
      "id": "5d1f7a9c-2e4a-5f6b-d8c0-1b3e5g7i9k2l",
      "name": "Log to Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.numbers_extracted }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "6e2g8b0d-3f5b-6a7c-e9d1-2c4f6h8j0l3m",
      "name": "Filter Only Successful Extractions",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "url": "{{ $vars.MAIL2WA_WEBHOOK_URL }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $vars.MAIL2WA_API_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "{\\n  \\\"numbers\\\": {{ JSON.stringify($('Extract WhatsApp Numbers (FIXED)').item.json.extracted_numbers) }},\\n  \\\"message\\\": \\\"🎉 Ciao! Abbiamo ricevuto il tuo messaggio WhatsApp. Ti ricontatteremo presto per maggiori informazioni.\\\",\\n  \\\"sender_name\\\": \\\"{{ $vars.COMPANY_NAME }}\\\",\\n  \\\"template_id\\\": \\\"welcome_message\\\"\\n}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "7f3h9c1e-4a6c-7b8d-f0e2-3d5g7i9k1m4n",
      "name": "Send WhatsApp Messages",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 */15 * * * *"
            }
          ]
        }
      },
      "id": "8a4i0d2f-5b7d-8c9e-a1f3-4e6h8j0l2n5o",
      "name": "Schedule Every 15 Minutes",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [60, 300]
    },
    {
      "parameters": {
        "jsCode": "// Error handling and notification with improved logging\\nconst items = $input.all();\\nconst results = [];\\n\\n// Count errors and successes\\nlet totalProcessed = 0;\\nlet successCount = 0;\\nlet errorCount = 0;\\nconst errors = [];\\nlet mail2waEmailsFound = 0;\\n\\nfor (const item of items) {\\n  totalProcessed++;\\n  \\n  if (item.json.processing_status === 'completed') {\\n    successCount++;\\n  } else {\\n    errorCount++;\\n    errors.push({\\n      email: item.json.sender_email,\\n      error: item.json.error_message || 'Unknown error'\\n    });\\n  }\\n  \\n  // Check if this was a Mail2Wa email\\n  if (item.json.reply_to && item.json.reply_to.includes('mail2wa.it')) {\\n    mail2waEmailsFound++;\\n  }\\n}\\n\\n// Create summary report\\nconst summary = {\\n  workflow_run: new Date().toISOString(),\\n  total_emails_processed: totalProcessed,\\n  successful_extractions: successCount,\\n  failed_extractions: errorCount,\\n  mail2wa_emails_found: mail2waEmailsFound,\\n  success_rate: totalProcessed > 0 ? Math.round((successCount / totalProcessed) * 100) : 0,\\n  errors: errors.slice(0, 10), // Limit to first 10 errors\\n  status: errorCount === 0 ? 'all_success' : errorCount < totalProcessed ? 'partial_success' : 'all_failed',\\n  version: 'improved_patterns_v1.1'\\n};\\n\\nresults.push({ json: summary });\\n\\nreturn results;"
      },
      "id": "9b5j1e3g-6c8e-9d0f-b2g4-5f7i9k1m3o6p",
      "name": "Generate Summary Report",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 300]
    }
  ],
  "connections": {
    "Schedule Every 15 Minutes": {
      "main": [
        [
          {
            "node": "Gmail - Get New Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail - Get New Emails": {
      "main": [
        [
          {
            "node": "Extract WhatsApp Numbers (FIXED)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract WhatsApp Numbers (FIXED)": {
      "main": [
        [
          {
            "node": "Send to WordPress API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to WordPress API": {
      "main": [
        [
          {
            "node": "Process API Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process API Response": {
      "main": [
        [
          {
            "node": "Log to Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log to Google Sheets": {
      "main": [
        [
          {
            "node": "Filter Only Successful Extractions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Only Successful Extractions": {
      "main": [
        [
          {
            "node": "Send WhatsApp Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send WhatsApp Messages": {
      "main": [
        [
          {
            "node": "Generate Summary Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowOwner",
    "errorWorkflow": "",
    "timezone": "Europe/Rome"
  },
  "versionId": "1.1.0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "whatsapp-saas-mail2wa-fix"
  },
  "id": "whatsapp-saas-email-extraction-fixed",
  "tags": [
    {
      "createdAt": "2025-08-16T23:27:00.000Z",
      "updatedAt": "2025-08-16T23:45:00.000Z",
      "id": "mail2wa-fix",
      "name": "Mail2Wa Fix"
    },
    {
      "createdAt": "2025-08-16T23:27:00.000Z",
      "updatedAt": "2025-08-16T23:27:00.000Z",
      "id": "whatsapp-automation",
      "name": "WhatsApp Automation"
    },
    {
      "createdAt": "2025-08-16T23:27:00.000Z",
      "updatedAt": "2025-08-16T23:27:00.000Z",
      "id": "email-processing",
      "name": "Email Processing"
    }
  ]
}